module TargetParser
  grammar Language
    rule context
      space? content:(function / series) space? {
        def simplify
          content.simplify
        end
      }
    end

    rule integer
      ('+' / '-')? [0-9]+ {
        def simplify
          text_value.to_i
        end
      }
    end
    
    rule float
      ('+' / '-')? [0-9]+ (('.' [0-9]+) / ('e' [0-9]+)) {
        def simplify
          text_value.to_f
        end
      }
    end
    
    rule string
      '"' value:([^"\\] / "\\" . )* '"' {
        def simplify
          value.text_value
        end
      }
    end
    
    rule function_name
      [a-zA-Z\=\*] [a-zA-Z0-9_\=\*]*
    end

    rule series
      [a-zA-Z\=\*] [a-zA-Z0-9_\.]* {
        def simplify
          [:series, text_value]
        end
      }
    end
    
    rule space
      [\s]+
    end

    rule function
      name:function_name space? '(' space? context:context space? args:(function_arg)* ')' {
        def simplify
          simplified_args = args.elements.map { |arg| arg.simplify }
          [:call, name.text_value, context.simplify] + simplified_args
        end
      }
    end

    rule function_arg
      ',' space? value:literal space? {
        def simplify
          value.simplify
        end
      }
    end

    rule literal
      float / integer / string
    end
  end
end
